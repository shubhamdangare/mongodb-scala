<statements>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>getCount</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>146</id><start>2188</start><end>2272</end><line>80</line><description>scala.concurrent.Await.result[Int](UserService.this.dao.count(mobileNumber, &quot;mobileNumber&quot;), scala.concurrent.duration.Duration.apply(5L, SECONDS))</description><symbolName>scala.concurrent.Await.result</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>findUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>137</id><start>1957</start><end>2007</end><line>69</line><description>UserService.this.dao.findOne(number, &quot;mobileNumber&quot;).map[Either[Nothing,com.knoldus.domain.User]](((x$1: com.knoldus.domain.User) =&gt; cats.implicits.catsSyntaxEitherId[com.knoldus.domain.User](x$1).asRight[Nothing]))(scala.concurrent.ExecutionContext.Implicits.global)</description><symbolName>scala.concurrent.Future.map</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/domain/User.scala</source><package>com.knoldus.domain</package><class>User</class><classType>Object</classType><fullClassName>com.knoldus.domain.User</fullClassName><method>apply</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/domain/User.scala</path><id>92</id><start>281</start><end>359</end><line>13</line><description>User.apply(new org.mongodb.scala.bson.`package`.ObjectId(), firstName, lastName, country, dob, mobileNumber, address)</description><symbolName>com.knoldus.domain.User.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>AddUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>101</id><start>823</start><end>863</end><line>28</line><description>cats.implicits.catsSyntaxEitherId[com.knoldus.service.UserService.UserServiceError.UserAlreadyExist.type](com.knoldus.service.UserService.UserServiceError.UserAlreadyExist).asLeft[Nothing]</description><symbolName>cats.syntax.EitherIdOps.asLeft</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</source><package>com.knoldus.db</package><class>MongoEntity</class><classType>Class</classType><fullClassName>com.knoldus.db.MongoEntity</fullClassName><method>count</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</path><id>83</id><start>1370</start><end>1389</end><line>54</line><description>org.mongodb.scala.model.Filters.equal[Int](fieldName, t)</description><symbolName>org.mongodb.scala.model.Filters.equal</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>deleteUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>110</id><start>1183</start><end>1196</end><line>40</line><description>cats.implicits.catsSyntaxEitherId[Int](value).asRight[Nothing]</description><symbolName>cats.syntax.EitherIdOps.asRight</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>updateUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>128</id><start>1696</start><end>1725</end><line>59</line><description>UserService.this.logger.info(&quot;user not found&quot;)</description><symbolName>org.apache.log4j.Category.info</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>updateUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>119</id><start>1508</start><end>1525</end><line>53</line><description>user.mobileNumber</description><symbolName>com.knoldus.domain.User.mobileNumber</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>deleteUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>104</id><start>963</start><end>988</end><line>35</line><description>UserService.this.getCount(userMobile).==(1)</description><symbolName>scala.Int.==</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</source><package>com.knoldus.db</package><class>MongoApplication</class><classType>Object</classType><fullClassName>com.knoldus.db.MongoApplication</fullClassName><method>&lt;none&gt;</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</path><id>23</id><start>1397</start><end>1453</end><line>35</line><description>com.knoldus.domain.User.apply(&quot;Ada&quot;, &quot;Lovelace&quot;, &quot;us&quot;, &quot;17/1970&quot;, 55522222, &quot;WD&quot;)</description><symbolName>com.knoldus.domain.User.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>AddUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>95</id><start>661</start><end>702</end><line>23</line><description>UserService.this.dao.create(user).map[com.knoldus.domain.User](((user: com.knoldus.domain.User) =&gt; user))(scala.concurrent.ExecutionContext.Implicits.global)</description><symbolName>scala.concurrent.Future.map</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>updateUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>131</id><start>1732</start><end>1787</end><line>60</line><description>scala.concurrent.Future.successful[Either[com.knoldus.service.UserService.UserServiceError.UserNotFound.type,Nothing]](cats.implicits.catsSyntaxEitherId[com.knoldus.service.UserService.UserServiceError.UserNotFound.type](com.knoldus.service.UserService.UserServiceError.UserNotFound).asLeft[Nothing])</description><symbolName>scala.concurrent.Future.successful</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>updateUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>122</id><start>1597</start><end>1611</end><line>54</line><description>&quot;mobileNumber&quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</source><package>com.knoldus.db</package><class>MongoEntity</class><classType>Class</classType><fullClassName>com.knoldus.db.MongoEntity</fullClassName><method>findAll</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</path><id>77</id><start>1111</start><end>1111</end><line>44</line><description>MongoEntity.this.c</description><symbolName>com.knoldus.db.MongoEntity.c</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</source><package>com.knoldus.db</package><class>MongoEntity</class><classType>Class</classType><fullClassName>com.knoldus.db.MongoEntity</fullClassName><method>count</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</path><id>86</id><start>1353</start><end>1414</end><line>54</line><description>scala.this.`package`.ScalaSingleObservable[Long](MongoEntity.this.collection.count(org.mongodb.scala.model.Filters.equal[Int](fieldName, t))).toFuture().map[Int](((x$6: Long) =&gt; x$6.toInt))(scala.concurrent.ExecutionContext.Implicits.global)</description><symbolName>scala.concurrent.Future.map</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</source><package>com.knoldus.db</package><class>ImplicitObservable</class><classType>Trait</classType><fullClassName>com.knoldus.db.Helpers.ImplicitObservable</fullClassName><method>printResults</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</path><id>50</id><start>913</start><end>927</end><line>29</line><description>scala.Predef.print(initial)</description><symbolName>scala.Predef.print</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</source><package>com.knoldus.db</package><class>ImplicitObservable</class><classType>Trait</classType><fullClassName>com.knoldus.db.Helpers.ImplicitObservable</fullClassName><method>printHeadResult</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</path><id>59</id><start>1077</start><end>1089</end><line>33</line><description>ImplicitObservable.this.headResult()</description><symbolName>com.knoldus.db.Helpers.ImplicitObservable.headResult</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>findUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>140</id><start>2090</start><end>2119</end><line>73</line><description>com.knoldus.service.UserService.UserServiceError.UserNotFound</description><symbolName>com.knoldus.service.UserService.UserServiceError.UserNotFound</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>deleteUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>113</id><start>1221</start><end>1250</end><line>43</line><description>UserService.this.logger.info(&quot;user not found&quot;)</description><symbolName>org.apache.log4j.Category.info</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</source><package>com.knoldus.db</package><class>GenericObservable</class><classType>Class</classType><fullClassName>com.knoldus.db.Helpers.GenericObservable</fullClassName><method>&lt;none&gt;</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</path><id>41</id><start>527</start><end>539</end><line>17</line><description>doc.toString()</description><symbolName>scala.Any.toString</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</source><package>com.knoldus.db</package><class>MongoApplication</class><classType>Object</classType><fullClassName>com.knoldus.db.MongoApplication</fullClassName><method>tryConnectToMongo</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</path><id>32</id><start>1872</start><end>1921</end><line>45</line><description>&quot;Could not connect to Mongo on bootstrap. Error: &quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</source><package>com.knoldus.db</package><class>MongoEntity</class><classType>Class</classType><fullClassName>com.knoldus.db.MongoEntity</fullClassName><method>deleteOne</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</path><id>68</id><start>692</start><end>733</end><line>29</line><description>MongoEntity.this.collection.deleteOne(org.mongodb.scala.model.Filters.equal[Int](fieldName, t))</description><symbolName>org.mongodb.scala.MongoCollection.deleteOne</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/utils/ThrowableExtensions.scala</source><package>com.knoldus.utils</package><class>ThrowableOps</class><classType>Class</classType><fullClassName>com.knoldus.utils.ThrowableExtensions.ThrowableOps</fullClassName><method>printInfo</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/utils/ThrowableExtensions.scala</path><id>149</id><start>217</start><end>223</end><line>9</line><description>&quot;\n    &quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</source><package>com.knoldus.db</package><class>ImplicitObservable</class><classType>Trait</classType><fullClassName>com.knoldus.db.Helpers.ImplicitObservable</fullClassName><method>printResults</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</path><id>53</id><start>967</start><end>981</end><line>30</line><description>ImplicitObservable.this.converter.apply(res)</description><symbolName>scala.Function1.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</source><package>com.knoldus.db</package><class>ImplicitObservable</class><classType>Trait</classType><fullClassName>com.knoldus.db.Helpers.ImplicitObservable</fullClassName><method>printHeadResult</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</path><id>62</id><start>1045</start><end>1093</end><line>33</line><description>scala.Predef.println(scala.StringContext.apply(&quot;&quot;, &quot;&quot;, &quot;&quot;).s(initial, ImplicitObservable.this.converter.apply(ImplicitObservable.this.headResult())))</description><symbolName>scala.Predef.println</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>findUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>134</id><start>1912</start><end>1950</end><line>68</line><description>UserService.this.logger.info(&quot;user added successfully&quot;)</description><symbolName>org.apache.log4j.Category.info</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</source><package>com.knoldus.db</package><class>MongoApplication</class><classType>Object</classType><fullClassName>com.knoldus.db.MongoApplication</fullClassName><method>tryConnectToMongo</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</path><id>35</id><start>1870</start><end>1943</end><line>45</line><description>scala.StringContext.apply(&quot;Could not connect to Mongo on bootstrap. Error: &quot;, &quot;&quot;).s(com.knoldus.utils.ThrowableExtensions.ThrowableOps(exception).printInfo)</description><symbolName>scala.StringContext.s</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</source><package>com.knoldus.db</package><class>ImplicitObservable</class><classType>Trait</classType><fullClassName>com.knoldus.db.Helpers.ImplicitObservable</fullClassName><method>results</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</path><id>44</id><start>673</start><end>740</end><line>24</line><description>scala.concurrent.Await.result[Seq[C]](org.mongodb.scala.`package`.ScalaObservable[C](ImplicitObservable.this.observable).toFuture(), scala.concurrent.duration.Duration.apply(10L, SECONDS))</description><symbolName>scala.concurrent.Await.result</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</source><package>com.knoldus.db</package><class>MongoApplication</class><classType>Object</classType><fullClassName>com.knoldus.db.MongoApplication</fullClassName><method>&lt;none&gt;</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</path><id>8</id><start>945</start><end>1013</end><line>26</line><description>org.bson.codecs.configuration.CodecRegistries.fromRegistries(org.bson.codecs.configuration.CodecRegistries.fromProviders({
  import org.bson.codecs.Codec;
  import org.bson.codecs.configuration.{CodecProvider, CodecRegistry};
  {
    final class $anon extends Object with org.bson.codecs.configuration.CodecProvider {
      def &lt;init&gt;(): &lt;$anon: org.bson.codecs.configuration.CodecProvider&gt; = {
        $anon.super.&lt;init&gt;();
        ()
      };
      @SuppressWarnings(value = [&quot;unchecked&quot;]) def get[C](clazz: Class[C], codecRegistry: org.bson.codecs.configuration.CodecRegistry): org.bson.codecs.Codec[C] = if (classOf[com.knoldus.domain.User].isAssignableFrom(clazz))
        {
  import scala.collection.mutable;
  import org.bson.{BsonInvalidOperationException, BsonWriter};
  import org.bson.codecs.EncoderContext;
  import org.bson.codecs.configuration.CodecRegistry;
  import org.mongodb.scala.bson.codecs.macrocodecs.MacroCodec;
  case class UserMacroCodec extends Object with org.mongodb.scala.bson.codecs.macrocodecs.MacroCodec[com.knoldus.domain.User] with Product with Serializable {
    &lt;caseaccessor&gt; &lt;paramaccessor&gt; private[this] val codecRegistry: org.bson.codecs.configuration.CodecRegistry = _;
    &lt;stable&gt; &lt;caseaccessor&gt; &lt;accessor&gt; &lt;paramaccessor&gt; def codecRegistry: org.bson.codecs.configuration.CodecRegistry = UserMacroCodec.this.codecRegistry;
    def &lt;init&gt;(codecRegistry: org.bson.codecs.configuration.CodecRegistry): UserMacroCodec = {
      UserMacroCodec.super.&lt;init&gt;();
      ()
    };
    private[this] val caseClassesMap: scala.collection.immutable.Map[String,Class[_]] = {
      val caseClassesMap: scala.collection.mutable.Map[String,Class[_]] = scala.collection.mutable.Map.apply[String, Class[_]]();
      caseClassesMap.+=(scala.Predef.ArrowAssoc[String](&quot;User&quot;).-&gt;[Class[com.knoldus.domain.User]](classOf[com.knoldus.domain.User]));
      caseClassesMap.toMap[String, Class[_]](scala.Predef.$conforms[(String, Class[_])])
    };
    &lt;stable&gt; &lt;accessor&gt; def caseClassesMap: scala.collection.immutable.Map[String,Class[_]] = UserMacroCodec.this.caseClassesMap;
    private[this] val classToCaseClassMap: scala.collection.immutable.Map[Class[_],Boolean] = {
      val classToCaseClassMap: scala.collection.mutable.Map[Class[_],Boolean] = scala.collection.mutable.Map.apply[Class[_], Boolean]();
      classToCaseClassMap.++=(scala.collection.immutable.List.apply[(Class[org.bson.types.ObjectId], Boolean)](scala.Tuple2.apply[Class[org.bson.types.ObjectId], Boolean](classOf[org.bson.types.ObjectId], false)));
      classToCaseClassMap.++=(scala.collection.immutable.List.apply[(Class[String], Boolean)](scala.Tuple2.apply[Class[String], Boolean](classOf[java.lang.String], false)));
      classToCaseClassMap.++=(scala.collection.immutable.List.apply[(Class[String], Boolean)](scala.Tuple2.apply[Class[String], Boolean](classOf[java.lang.String], false)));
      classToCaseClassMap.++=(scala.collection.immutable.List.apply[(Class[String], Boolean)](scala.Tuple2.apply[Class[String], Boolean](classOf[java.lang.String], false)));
      classToCaseClassMap.++=(scala.collection.immutable.List.apply[(Class[String], Boolean)](scala.Tuple2.apply[Class[String], Boolean](classOf[java.lang.String], false)));
      classToCaseClassMap.++=(scala.collection.immutable.List.apply[(Class[Integer], Boolean)](scala.Tuple2.apply[Class[Integer], Boolean](classOf[java.lang.Integer], false)));
      classToCaseClassMap.++=(scala.collection.immutable.List.apply[(Class[String], Boolean)](scala.Tuple2.apply[Class[String], Boolean](classOf[java.lang.String], false)));
      classToCaseClassMap.++=(scala.collection.immutable.List.apply[(Class[com.knoldus.domain.User], Boolean)](scala.Tuple2.apply[Class[com.knoldus.domain.User], Boolean](classOf[com.knoldus.domain.User], true)));
      classToCaseClassMap.toMap[Class[_], Boolean](scala.Predef.$conforms[(Class[_], Boolean)])
    };
    &lt;stable&gt; &lt;accessor&gt; def classToCaseClassMap: scala.collection.immutable.Map[Class[_],Boolean] = UserMacroCodec.this.classToCaseClassMap;
    private[this] val classFieldTypeArgsMap: scala.collection.immutable.Map[String,Map[String,List[Class[_]]]] = {
      val classFieldTypeArgs: scala.collection.mutable.Map[String,scala.collection.immutable.Map[String,List[Class[_]]]] = scala.collection.mutable.Map.apply[String, Map[String,List[Class[_]]]]();
      classFieldTypeArgs.+=(scala.Predef.ArrowAssoc[String](&quot;User&quot;).-&gt;[scala.collection.immutable.Map[String,List[Class[_]]]]({
        val typeArgs: scala.collection.mutable.Map[String,List[Class[_]]] = scala.collection.mutable.Map.apply[String, List[Class[_]]]();
        typeArgs.+=(scala.Predef.ArrowAssoc[String](&quot;_id&quot;).-&gt;[List[Class[_]]]({
          val tpeArgs: scala.collection.mutable.ListBuffer[Class[_]] = scala.collection.mutable.ListBuffer.empty[Class[_]];
          tpeArgs.+=(classOf[org.bson.types.ObjectId]);
          tpeArgs.toList
        }));
        typeArgs.+=(scala.Predef.ArrowAssoc[String](&quot;firstName&quot;).-&gt;[List[Class[_]]]({
          val tpeArgs: scala.collection.mutable.ListBuffer[Class[_]] = scala.collection.mutable.ListBuffer.empty[Class[_]];
          tpeArgs.+=(classOf[java.lang.String]);
          tpeArgs.toList
        }));
        typeArgs.+=(scala.Predef.ArrowAssoc[String](&quot;lastName&quot;).-&gt;[List[Class[_]]]({
          val tpeArgs: scala.collection.mutable.ListBuffer[Class[_]] = scala.collection.mutable.ListBuffer.empty[Class[_]];
          tpeArgs.+=(classOf[java.lang.String]);
          tpeArgs.toList
        }));
        typeArgs.+=(scala.Predef.ArrowAssoc[String](&quot;country&quot;).-&gt;[List[Class[_]]]({
          val tpeArgs: scala.collection.mutable.ListBuffer[Class[_]] = scala.collection.mutable.ListBuffer.empty[Class[_]];
          tpeArgs.+=(classOf[java.lang.String]);
          tpeArgs.toList
        }));
        typeArgs.+=(scala.Predef.ArrowAssoc[String](&quot;dob&quot;).-&gt;[List[Class[_]]]({
          val tpeArgs: scala.collection.mutable.ListBuffer[Class[_]] = scala.collection.mutable.ListBuffer.empty[Class[_]];
          tpeArgs.+=(classOf[java.lang.String]);
          tpeArgs.toList
        }));
        typeArgs.+=(scala.Predef.ArrowAssoc[String](&quot;mobileNumber&quot;).-&gt;[List[Class[_]]]({
          val tpeArgs: scala.collection.mutable.ListBuffer[Class[_]] = scala.collection.mutable.ListBuffer.empty[Class[_]];
          tpeArgs.+=(classOf[java.lang.Integer]);
          tpeArgs.toList
        }));
        typeArgs.+=(scala.Predef.ArrowAssoc[String](&quot;address&quot;).-&gt;[List[Class[_]]]({
          val tpeArgs: scala.collection.mutable.ListBuffer[Class[_]] = scala.collection.mutable.ListBuffer.empty[Class[_]];
          tpeArgs.+=(classOf[java.lang.String]);
          tpeArgs.toList
        }));
        typeArgs.toMap[String, List[Class[_]]](scala.Predef.$conforms[(String, List[Class[_]])])
      }));
      classFieldTypeArgs.toMap[String, Map[String,List[Class[_]]]](scala.Predef.$conforms[(String, scala.collection.immutable.Map[String,List[Class[_]]])])
    };
    &lt;stable&gt; &lt;accessor&gt; def classFieldTypeArgsMap: scala.collection.immutable.Map[String,Map[String,List[Class[_]]]] = UserMacroCodec.this.classFieldTypeArgsMap;
    private[this] val encoderClass: Class[com.knoldus.domain.User] = classOf[com.knoldus.domain.User];
    &lt;stable&gt; &lt;accessor&gt; def encoderClass: Class[com.knoldus.domain.User] = UserMacroCodec.this.encoderClass;
    def getInstance(className: String, fieldData: Map[String,Any]): com.knoldus.domain.User = className match {
      case &quot;User&quot; =&gt; new com.knoldus.domain.User(fieldData.getOrElse[Any](&quot;_id&quot;, throw new org.bson.BsonInvalidOperationException(&quot;Missing field: \&quot;_id\&quot;&quot;)).asInstanceOf[org.mongodb.scala.bson.ObjectId], fieldData.getOrElse[Any](&quot;firstName&quot;, throw new org.bson.BsonInvalidOperationException(&quot;Missing field: \&quot;firstName\&quot;&quot;)).asInstanceOf[String], fieldData.getOrElse[Any](&quot;lastName&quot;, throw new org.bson.BsonInvalidOperationException(&quot;Missing field: \&quot;lastName\&quot;&quot;)).asInstanceOf[String], fieldData.getOrElse[Any](&quot;country&quot;, throw new org.bson.BsonInvalidOperationException(&quot;Missing field: \&quot;country\&quot;&quot;)).asInstanceOf[String], fieldData.getOrElse[Any](&quot;dob&quot;, throw new org.bson.BsonInvalidOperationException(&quot;Missing field: \&quot;dob\&quot;&quot;)).asInstanceOf[String], fieldData.getOrElse[Any](&quot;mobileNumber&quot;, throw new org.bson.BsonInvalidOperationException(&quot;Missing field: \&quot;mobileNumber\&quot;&quot;)).asInstanceOf[Int], fieldData.getOrElse[Any](&quot;address&quot;, throw new org.bson.BsonInvalidOperationException(&quot;Missing field: \&quot;address\&quot;&quot;)).asInstanceOf[String])
      case _ =&gt; throw new org.bson.BsonInvalidOperationException(&quot;Unexpected class type: &quot;.+(className))
    };
    def writeCaseClassData(className: String, writer: org.bson.BsonWriter, value: com.knoldus.domain.User, encoderContext: org.bson.codecs.EncoderContext): Unit = {
      writer.writeStartDocument();
      this.writeClassFieldName(writer, className, encoderContext);
      className match {
        case &quot;User&quot; =&gt; {
          val instanceValue: com.knoldus.domain.User = value.asInstanceOf[com.knoldus.domain.User];
          {
            val localVal: org.mongodb.scala.bson.ObjectId = instanceValue._id;
            writer.writeName(&quot;_id&quot;);
            this.writeFieldValue[org.mongodb.scala.bson.ObjectId](&quot;_id&quot;, writer, localVal, encoderContext)
          };
          {
            val localVal: String = instanceValue.firstName;
            writer.writeName(&quot;firstName&quot;);
            this.writeFieldValue[String](&quot;firstName&quot;, writer, localVal, encoderContext)
          };
          {
            val localVal: String = instanceValue.lastName;
            writer.writeName(&quot;lastName&quot;);
            this.writeFieldValue[String](&quot;lastName&quot;, writer, localVal, encoderContext)
          };
          {
            val localVal: String = instanceValue.country;
            writer.writeName(&quot;country&quot;);
            this.writeFieldValue[String](&quot;country&quot;, writer, localVal, encoderContext)
          };
          {
            val localVal: String = instanceValue.dob;
            writer.writeName(&quot;dob&quot;);
            this.writeFieldValue[String](&quot;dob&quot;, writer, localVal, encoderContext)
          };
          {
            val localVal: Int = instanceValue.mobileNumber;
            writer.writeName(&quot;mobileNumber&quot;);
            this.writeFieldValue[Int](&quot;mobileNumber&quot;, writer, localVal, encoderContext)
          };
          {
            val localVal: String = instanceValue.address;
            writer.writeName(&quot;address&quot;);
            this.writeFieldValue[String](&quot;address&quot;, writer, localVal, encoderContext)
          }
        }
      };
      writer.writeEndDocument()
    };
    &lt;synthetic&gt; def copy(codecRegistry: org.bson.codecs.configuration.CodecRegistry = codecRegistry): UserMacroCodec = new UserMacroCodec(codecRegistry);
    &lt;synthetic&gt; def copy$default$1: org.bson.codecs.configuration.CodecRegistry = UserMacroCodec.this.codecRegistry;
    override &lt;synthetic&gt; def productPrefix: String = &quot;UserMacroCodec&quot;;
    &lt;synthetic&gt; def productArity: Int = 1;
    &lt;synthetic&gt; def productElement(x$1: Int): Any = x$1 match {
      case 0 =&gt; UserMacroCodec.this.codecRegistry
      case _ =&gt; throw new IndexOutOfBoundsException(x$1.toString())
    };
    override &lt;synthetic&gt; def productIterator: Iterator[Any] = scala.runtime.ScalaRunTime.typedProductIterator[Any](UserMacroCodec.this);
    &lt;synthetic&gt; def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[UserMacroCodec]();
    override &lt;synthetic&gt; def hashCode(): Int = scala.runtime.ScalaRunTime._hashCode(UserMacroCodec.this);
    override &lt;synthetic&gt; def toString(): String = scala.runtime.ScalaRunTime._toString(UserMacroCodec.this);
    override &lt;synthetic&gt; def equals(x$1: Any): Boolean = UserMacroCodec.this.eq(x$1.asInstanceOf[Object]).||(x$1 match {
  case (_: UserMacroCodec) =&gt; true
  case _ =&gt; false
}.&amp;&amp;({
      &lt;synthetic&gt; val UserMacroCodec$1: UserMacroCodec = x$1.asInstanceOf[UserMacroCodec];
      UserMacroCodec.this.codecRegistry.==(UserMacroCodec$1.codecRegistry).&amp;&amp;(UserMacroCodec$1.canEqual(UserMacroCodec.this))
    }))
  };
  &lt;synthetic&gt; object UserMacroCodec extends scala.runtime.AbstractFunction1[org.bson.codecs.configuration.CodecRegistry,UserMacroCodec] with Serializable {
    def &lt;init&gt;(): UserMacroCodec.type = {
      UserMacroCodec.super.&lt;init&gt;();
      ()
    };
    final override &lt;synthetic&gt; def toString(): String = &quot;UserMacroCodec&quot;;
    case &lt;synthetic&gt; def apply(codecRegistry: org.bson.codecs.configuration.CodecRegistry): UserMacroCodec = new UserMacroCodec(codecRegistry);
    case &lt;synthetic&gt; def unapply(x$0: UserMacroCodec): Option[org.bson.codecs.configuration.CodecRegistry] = if (x$0.==(null))
      scala.None
    else
      Some.apply[org.bson.codecs.configuration.CodecRegistry](x$0.codecRegistry)
  };
  UserMacroCodec.apply(codecRegistry).asInstanceOf[org.bson.codecs.Codec[com.knoldus.domain.User]]
}.asInstanceOf[org.bson.codecs.Codec[C]]
      else
        null
    };
    new $anon()
  }
}), org.mongodb.scala.bson.codecs.`package`.DEFAULT_CODEC_REGISTRY)</description><symbolName>org.bson.codecs.configuration.CodecRegistries.fromRegistries</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</source><package>com.knoldus.db</package><class>MongoApplication</class><classType>Object</classType><fullClassName>com.knoldus.db.MongoApplication</fullClassName><method>&lt;none&gt;</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</path><id>17</id><start>1313</start><end>1326</end><line>32</line><description>MongoApplication.this.mongoDatabase</description><symbolName>com.knoldus.db.MongoApplication.mongoDatabase</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>updateUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>125</id><start>1658</start><end>1671</end><line>56</line><description>cats.implicits.catsSyntaxEitherId[Int](value).asRight[Nothing]</description><symbolName>cats.syntax.EitherIdOps.asRight</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</source><package>com.knoldus.db</package><class>MongoApplication</class><classType>Object</classType><fullClassName>com.knoldus.db.MongoApplication</fullClassName><method>&lt;none&gt;</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</path><id>26</id><start>1581</start><end>1658</end><line>40</line><description>scala.concurrent.Await.result[Either[com.knoldus.service.UserService.UserServiceError,com.knoldus.domain.User]](MongoApplication.this.userService.findUser(111311111), scala.concurrent.duration.Duration.apply(10L, SECONDS))</description><symbolName>scala.concurrent.Await.result</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</source><package>com.knoldus.db</package><class>MongoEntity</class><classType>Class</classType><fullClassName>com.knoldus.db.MongoEntity</fullClassName><method>update</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</path><id>80</id><start>1244</start><end>1261</end><line>48</line><description>org.mongodb.scala.model.Updates.set[Int](fieldName, t)</description><symbolName>org.mongodb.scala.model.Updates.set</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</source><package>com.knoldus.db</package><class>MongoEntity</class><classType>Class</classType><fullClassName>com.knoldus.db.MongoEntity</fullClassName><method>collection</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</path><id>89</id><start>1495</start><end>1495</end><line>59</line><description>MongoEntity.this.c</description><symbolName>com.knoldus.db.MongoEntity.c</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>deleteUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>116</id><start>1257</start><end>1312</end><line>44</line><description>scala.concurrent.Future.successful[Either[com.knoldus.service.UserService.UserServiceError.UserNotFound.type,Nothing]](cats.implicits.catsSyntaxEitherId[com.knoldus.service.UserService.UserServiceError.UserNotFound.type](com.knoldus.service.UserService.UserServiceError.UserNotFound).asLeft[Nothing])</description><symbolName>scala.concurrent.Future.successful</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>AddUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>98</id><start>608</start><end>746</end><line>21</line><description>{
  UserService.this.logger.info(&quot;user added successfully&quot;);
  UserService.this.dao.create(user).map[com.knoldus.domain.User](((user: com.knoldus.domain.User) =&gt; user))(scala.concurrent.ExecutionContext.Implicits.global);
  scala.concurrent.Future.successful[Either[Nothing,com.knoldus.domain.User]](cats.implicits.catsSyntaxEitherId[com.knoldus.domain.User](user).asRight[Nothing])
}</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</source><package>com.knoldus.db</package><class>MongoEntity</class><classType>Class</classType><fullClassName>com.knoldus.db.MongoEntity</fullClassName><method>deleteMany</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</path><id>71</id><start>857</start><end>902</end><line>34</line><description>MongoEntity.this.collection.deleteMany(org.mongodb.scala.model.Filters.equal[Int](fieldName, data))</description><symbolName>org.mongodb.scala.MongoCollection.deleteMany</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>deleteUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>107</id><start>1122</start><end>1136</end><line>38</line><description>&quot;mobileNumber&quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</source><package>com.knoldus.db</package><class>MongoApplication</class><classType>Object</classType><fullClassName>com.knoldus.db.MongoApplication</fullClassName><method>&lt;none&gt;</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</path><id>11</id><start>1051</start><end>1140</end><line>27</line><description>MongoApplication.this.mongoClient.getDatabase(MongoApplication.this.conf.getString(&quot;mongo.db-name&quot;)).withCodecRegistry(MongoApplication.this.codecRegistry)</description><symbolName>org.mongodb.scala.MongoDatabase.withCodecRegistry</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</source><package>com.knoldus.db</package><class>MongoEntity</class><classType>Class</classType><fullClassName>com.knoldus.db.MongoEntity</fullClassName><method>deleteMany</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</path><id>74</id><start>843</start><end>926</end><line>34</line><description>t.map[scala.concurrent.Future[Seq[Int]], Seq[scala.concurrent.Future[Seq[Int]]]](((data: Int) =&gt; scala.this.`package`.ScalaSingleObservable[org.mongodb.scala.result.DeleteResult](MongoEntity.this.collection.deleteMany(org.mongodb.scala.model.Filters.equal[Int](fieldName, data))).toFuture().map[Seq[Int]](((x$4: org.mongodb.scala.result.DeleteResult) =&gt; t))(scala.concurrent.ExecutionContext.Implicits.global)))(collection.this.Seq.canBuildFrom[scala.concurrent.Future[Seq[Int]]])</description><symbolName>scala.collection.TraversableLike.map</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</source><package>com.knoldus.db</package><class>ImplicitObservable</class><classType>Trait</classType><fullClassName>com.knoldus.db.Helpers.ImplicitObservable</fullClassName><method>printHeadResult</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</path><id>56</id><start>1055</start><end>1056</end><line>33</line><description>&quot;&quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/dao/UserDao.scala</source><package>com.knoldus.dao</package><class>UserDao</class><classType>Class</classType><fullClassName>com.knoldus.dao.UserDao</fullClassName><method>&lt;none&gt;</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/dao/UserDao.scala</path><id>38</id><start>248</start><end>255</end><line>9</line><description>UserDao.this.mongodb</description><symbolName>com.knoldus.dao.UserDao.mongodb</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</source><package>com.knoldus.db</package><class>MongoApplication</class><classType>Object</classType><fullClassName>com.knoldus.db.MongoApplication</fullClassName><method>tryConnectToMongo</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</path><id>29</id><start>1795</start><end>1805</end><line>43</line><description>scala.concurrent.duration.`package`.DurationInt(30).seconds</description><symbolName>scala.concurrent.duration.DurationConversions.seconds</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</source><package>com.knoldus.db</package><class>ImplicitObservable</class><classType>Trait</classType><fullClassName>com.knoldus.db.Helpers.ImplicitObservable</fullClassName><method>headResult</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</path><id>47</id><start>765</start><end>828</end><line>26</line><description>scala.concurrent.Await.result[C](org.mongodb.scala.`package`.ScalaObservable[C](ImplicitObservable.this.observable).head(), scala.concurrent.duration.Duration.apply(10L, SECONDS))</description><symbolName>scala.concurrent.Await.result</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</source><package>com.knoldus.db</package><class>MongoApplication</class><classType>Object</classType><fullClassName>com.knoldus.db.MongoApplication</fullClassName><method>&lt;none&gt;</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</path><id>20</id><start>1369</start><end>1373</end><line>33</line><description>MongoApplication.this.conf</description><symbolName>com.knoldus.db.MongoApplication.conf</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</source><package>com.knoldus.db</package><class>MongoApplication</class><classType>Object</classType><fullClassName>com.knoldus.db.MongoApplication</fullClassName><method>&lt;none&gt;</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</path><id>2</id><start>847</start><end>860</end><line>24</line><description>this.getClass()</description><symbolName>java.lang.Object.getClass</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</source><package>com.knoldus.db</package><class>MongoEntity</class><classType>Class</classType><fullClassName>com.knoldus.db.MongoEntity</fullClassName><method>create</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</path><id>65</id><start>575</start><end>598</end><line>24</line><description>MongoEntity.this.collection.insertOne(t)</description><symbolName>org.mongodb.scala.MongoCollection.insertOne</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</source><package>com.knoldus.db</package><class>MongoApplication</class><classType>Object</classType><fullClassName>com.knoldus.db.MongoApplication</fullClassName><method>&lt;none&gt;</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</path><id>5</id><start>882</start><end>922</end><line>25</line><description>org.mongodb.scala.MongoClient.apply(MongoApplication.this.conf.getString(&quot;mongo.url&quot;))</description><symbolName>org.mongodb.scala.MongoClient.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</source><package>com.knoldus.db</package><class>MongoApplication</class><classType>Object</classType><fullClassName>com.knoldus.db.MongoApplication</fullClassName><method>&lt;none&gt;</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</path><id>14</id><start>1183</start><end>1251</end><line>28</line><description>MongoApplication.this.mongoDatabase.getCollection[com.knoldus.domain.User](MongoApplication.this.conf.getString(&quot;mongo.collection-name&quot;))(DefaultHelper.this.DefaultsTo.overrideDefault[com.knoldus.domain.User, org.mongodb.scala.Document], (ClassTag.apply[com.knoldus.domain.User](classOf[com.knoldus.domain.User]): scala.reflect.ClassTag[com.knoldus.domain.User]))</description><symbolName>org.mongodb.scala.MongoDatabase.getCollection</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/utils/ThrowableExtensions.scala</source><package>com.knoldus.utils</package><class>ThrowableOps</class><classType>Class</classType><fullClassName>com.knoldus.utils.ThrowableExtensions.ThrowableOps</fullClassName><method>printInfo</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/utils/ThrowableExtensions.scala</path><id>151</id><start>152</start><end>187</end><line>8</line><description>ThrowableOps.this.throwable.getClass().getCanonicalName()</description><symbolName>java.lang.Class.getCanonicalName</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>findUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>142</id><start>2072</start><end>2127</end><line>73</line><description>scala.concurrent.Future.successful[Either[com.knoldus.service.UserService.UserServiceError.UserNotFound.type,Nothing]](cats.implicits.catsSyntaxEitherId[com.knoldus.service.UserService.UserServiceError.UserNotFound.type](com.knoldus.service.UserService.UserServiceError.UserNotFound).asLeft[Nothing])</description><symbolName>scala.concurrent.Future.successful</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>updateUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>124</id><start>1474</start><end>1631</end><line>53</line><description>UserService.this.dao.findOne(user.mobileNumber, &quot;mobileNumber&quot;).flatMap[Int](((user: com.knoldus.domain.User) =&gt; UserService.this.dao.update(user.mobileNumber, mobile, &quot;mobileNumber&quot;).map[Int](((data: Int) =&gt; data))(scala.concurrent.ExecutionContext.Implicits.global)))(scala.concurrent.ExecutionContext.Implicits.global)</description><symbolName>scala.concurrent.Future.flatMap</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>findUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>133</id><start>1881</start><end>1902</end><line>67</line><description>UserService.this.getCount(number).==(1)</description><symbolName>scala.Int.==</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>deleteUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>106</id><start>1103</start><end>1120</end><line>38</line><description>user.mobileNumber</description><symbolName>com.knoldus.domain.User.mobileNumber</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>deleteUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>115</id><start>1275</start><end>1311</end><line>44</line><description>cats.implicits.catsSyntaxEitherId[com.knoldus.service.UserService.UserServiceError.UserNotFound.type](com.knoldus.service.UserService.UserServiceError.UserNotFound).asLeft[Nothing]</description><symbolName>cats.syntax.EitherIdOps.asLeft</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</source><package>com.knoldus.db</package><class>ImplicitObservable</class><classType>Trait</classType><fullClassName>com.knoldus.db.Helpers.ImplicitObservable</fullClassName><method>headResult</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</path><id>46</id><start>797</start><end>827</end><line>26</line><description>scala.concurrent.duration.Duration.apply(10L, SECONDS)</description><symbolName>scala.concurrent.duration.Duration.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>updateUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>127</id><start>1453</start><end>1678</end><line>51</line><description>{
  val result: scala.concurrent.Future[Int] = UserService.this.dao.findOne(user.mobileNumber, &quot;mobileNumber&quot;).flatMap[Int](((user: com.knoldus.domain.User) =&gt; UserService.this.dao.update(user.mobileNumber, mobile, &quot;mobileNumber&quot;).map[Int](((data: Int) =&gt; data))(scala.concurrent.ExecutionContext.Implicits.global)))(scala.concurrent.ExecutionContext.Implicits.global);
  result.map[Either[Nothing,Int]](((value: Int) =&gt; cats.implicits.catsSyntaxEitherId[Int](value).asRight[Nothing]))(scala.concurrent.ExecutionContext.Implicits.global)
}</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>updateUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>118</id><start>1419</start><end>1451</end><line>51</line><description>UserService.this.getCount(user.mobileNumber).==(1)</description><symbolName>scala.Int.==</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>findUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>136</id><start>1997</start><end>2006</end><line>69</line><description>cats.implicits.catsSyntaxEitherId[com.knoldus.domain.User](x$1).asRight[Nothing]</description><symbolName>cats.syntax.EitherIdOps.asRight</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>AddUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>100</id><start>823</start><end>856</end><line>28</line><description>com.knoldus.service.UserService.UserServiceError.UserAlreadyExist</description><symbolName>com.knoldus.service.UserService.UserServiceError.UserAlreadyExist</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>deleteUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>109</id><start>1011</start><end>1156</end><line>37</line><description>UserService.this.dao.findOne(userMobile, &quot;mobileNumber&quot;).flatMap[Int](((user: com.knoldus.domain.User) =&gt; UserService.this.dao.deleteOne(user.mobileNumber, &quot;mobileNumber&quot;).map[Int](((data: Int) =&gt; data))(scala.concurrent.ExecutionContext.Implicits.global)))(scala.concurrent.ExecutionContext.Implicits.global)</description><symbolName>scala.concurrent.Future.flatMap</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</source><package>com.knoldus.db</package><class>MongoEntity</class><classType>Class</classType><fullClassName>com.knoldus.db.MongoEntity</fullClassName><method>update</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</path><id>82</id><start>1195</start><end>1285</end><line>48</line><description>scala.this.`package`.ScalaSingleObservable[org.mongodb.scala.result.UpdateResult](MongoEntity.this.collection.updateOne(org.mongodb.scala.model.Filters.equal[Int](fieldName, existing), org.mongodb.scala.model.Updates.set[Int](fieldName, t))).toFuture().map[Int](((x$5: org.mongodb.scala.result.UpdateResult) =&gt; t))(scala.concurrent.ExecutionContext.Implicits.global)</description><symbolName>scala.concurrent.Future.map</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/domain/User.scala</source><package>com.knoldus.domain</package><class>User</class><classType>Object</classType><fullClassName>com.knoldus.domain.User</fullClassName><method>apply</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/domain/User.scala</path><id>91</id><start>286</start><end>300</end><line>13</line><description>new org.mongodb.scala.bson.`package`.ObjectId()</description><symbolName>org.bson.types.ObjectId.&lt;init&gt;</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</source><package>com.knoldus.db</package><class>ImplicitObservable</class><classType>Trait</classType><fullClassName>com.knoldus.db.Helpers.ImplicitObservable</fullClassName><method>printResults</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</path><id>55</id><start>934</start><end>983</end><line>30</line><description>ImplicitObservable.this.results().foreach[Unit](((res: C) =&gt; scala.Predef.println(ImplicitObservable.this.converter.apply(res))))</description><symbolName>scala.collection.IterableLike.foreach</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</source><package>com.knoldus.db</package><class>MongoEntity</class><classType>Class</classType><fullClassName>com.knoldus.db.MongoEntity</fullClassName><method>createMany</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</path><id>64</id><start>483</start><end>530</end><line>19</line><description>scala.this.`package`.ScalaSingleObservable[org.mongodb.scala.Completed](MongoEntity.this.collection.insertMany(t)).toFuture().map[Seq[T]](((x$1: org.mongodb.scala.Completed) =&gt; t))(scala.concurrent.ExecutionContext.Implicits.global)</description><symbolName>scala.concurrent.Future.map</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>getCount</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>145</id><start>2242</start><end>2271</end><line>80</line><description>scala.concurrent.duration.Duration.apply(5L, SECONDS)</description><symbolName>scala.concurrent.duration.Duration.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</source><package>com.knoldus.db</package><class>MongoEntity</class><classType>Class</classType><fullClassName>com.knoldus.db.MongoEntity</fullClassName><method>deleteMany</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</path><id>73</id><start>848</start><end>848</end><line>34</line><description>collection.this.Seq.canBuildFrom[scala.concurrent.Future[Seq[Int]]]</description><symbolName>scala.collection.Seq.canBuildFrom</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/utils/ThrowableExtensions.scala</source><package>com.knoldus.utils</package><class>ThrowableOps</class><classType>Class</classType><fullClassName>com.knoldus.utils.ThrowableExtensions.ThrowableOps</fullClassName><method>printInfo</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/utils/ThrowableExtensions.scala</path><id>154</id><start>146</start><end>266</end><line>8</line><description>scala.StringContext.apply(&quot;&quot;, &quot;:\n    &quot;, &quot;\n    &quot;, &quot;&quot;).s(ThrowableOps.this.throwable.getClass().getCanonicalName(), ThrowableOps.this.throwable.getMessage(), scala.Predef.refArrayOps[StackTraceElement](ThrowableOps.this.throwable.getStackTrace()).mkString(&quot;\n&quot;))</description><symbolName>scala.StringContext.s</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</source><package>com.knoldus.db</package><class>ImplicitObservable</class><classType>Trait</classType><fullClassName>com.knoldus.db.Helpers.ImplicitObservable</fullClassName><method>printHeadResult</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</path><id>58</id><start>1091</start><end>1092</end><line>33</line><description>&quot;&quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</source><package>com.knoldus.db</package><class>MongoEntity</class><classType>Class</classType><fullClassName>com.knoldus.db.MongoEntity</fullClassName><method>deleteOne</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</path><id>67</id><start>713</start><end>732</end><line>29</line><description>org.mongodb.scala.model.Filters.equal[Int](fieldName, t)</description><symbolName>org.mongodb.scala.model.Filters.equal</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</source><package>com.knoldus.db</package><class>MongoEntity</class><classType>Class</classType><fullClassName>com.knoldus.db.MongoEntity</fullClassName><method>count</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</path><id>85</id><start>1406</start><end>1413</end><line>54</line><description>x$6.toInt</description><symbolName>scala.Long.toInt</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>AddUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>94</id><start>616</start><end>654</end><line>22</line><description>UserService.this.logger.info(&quot;user added successfully&quot;)</description><symbolName>org.apache.log4j.Category.info</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>findUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>139</id><start>2031</start><end>2065</end><line>72</line><description>UserService.this.logger.info(&quot;user already exists&quot;)</description><symbolName>org.apache.log4j.Category.info</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</source><package>com.knoldus.db</package><class>ImplicitObservable</class><classType>Trait</classType><fullClassName>com.knoldus.db.Helpers.ImplicitObservable</fullClassName><method>printResults</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</path><id>49</id><start>913</start><end>927</end><line>29</line><description>scala.Predef.print(initial)</description><symbolName>scala.Predef.print</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</source><package>com.knoldus.db</package><class>DocumentObservable</class><classType>Class</classType><fullClassName>com.knoldus.db.Helpers.DocumentObservable</fullClassName><method>&lt;none&gt;</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</path><id>40</id><start>357</start><end>367</end><line>13</line><description>doc.toJson()</description><symbolName>org.mongodb.scala.bson.collection.BaseDocument.toJson</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>updateUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>130</id><start>1750</start><end>1786</end><line>60</line><description>cats.implicits.catsSyntaxEitherId[com.knoldus.service.UserService.UserServiceError.UserNotFound.type](com.knoldus.service.UserService.UserServiceError.UserNotFound).asLeft[Nothing]</description><symbolName>cats.syntax.EitherIdOps.asLeft</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</source><package>com.knoldus.db</package><class>MongoApplication</class><classType>Object</classType><fullClassName>com.knoldus.db.MongoApplication</fullClassName><method>&lt;none&gt;</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</path><id>13</id><start>1210</start><end>1210</end><line>28</line><description>DefaultHelper.this.DefaultsTo.overrideDefault[com.knoldus.domain.User, org.mongodb.scala.Document]</description><symbolName>org.mongodb.scala.bson.DefaultHelper.LowPriorityDefaultsTo.overrideDefault</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</source><package>com.knoldus.db</package><class>MongoApplication</class><classType>Object</classType><fullClassName>com.knoldus.db.MongoApplication</fullClassName><method>&lt;none&gt;</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</path><id>4</id><start>894</start><end>921</end><line>25</line><description>MongoApplication.this.conf.getString(&quot;mongo.url&quot;)</description><symbolName>com.typesafe.config.Config.getString</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/utils/ThrowableExtensions.scala</source><package>com.knoldus.utils</package><class>ThrowableOps</class><classType>Class</classType><fullClassName>com.knoldus.utils.ThrowableExtensions.ThrowableOps</fullClassName><method>printInfo</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/utils/ThrowableExtensions.scala</path><id>148</id><start>188</start><end>195</end><line>8</line><description>&quot;:\n    &quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>updateUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>121</id><start>1570</start><end>1587</end><line>54</line><description>user.mobileNumber</description><symbolName>com.knoldus.domain.User.mobileNumber</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</source><package>com.knoldus.db</package><class>MongoApplication</class><classType>Object</classType><fullClassName>com.knoldus.db.MongoApplication</fullClassName><method>&lt;none&gt;</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</path><id>22</id><start>1348</start><end>1374</end><line>33</line><description>new com.knoldus.service.UserService(MongoApplication.this.dao, MongoApplication.this.conf)(MongoApplication.this.logger)</description><symbolName>com.knoldus.service.UserService.&lt;init&gt;</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>AddUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>103</id><start>756</start><end>870</end><line>26</line><description>{
  UserService.this.logger.info(&quot;user already exists&quot;);
  scala.concurrent.Future.successful[Either[com.knoldus.service.UserService.UserServiceError.UserAlreadyExist.type,Nothing]](cats.implicits.catsSyntaxEitherId[com.knoldus.service.UserService.UserServiceError.UserAlreadyExist.type](com.knoldus.service.UserService.UserServiceError.UserAlreadyExist).asLeft[Nothing])
}</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</source><package>com.knoldus.db</package><class>MongoApplication</class><classType>Object</classType><fullClassName>com.knoldus.db.MongoApplication</fullClassName><method>tryConnectToMongo</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</path><id>31</id><start>1720</start><end>1807</end><line>43</line><description>scala.util.Try.apply[org.mongodb.scala.Document](scala.concurrent.Await.result[org.mongodb.scala.Document](scala.this.`package`.ScalaSingleObservable[org.mongodb.scala.Document](mongoDatabase.runCommand[org.mongodb.scala.Document](org.mongodb.scala.bson.collection.mutable.Document.apply(bson.this.BsonMagnets.tupleToCanBeBsonElement[Int](scala.Predef.ArrowAssoc[String](&quot;ping&quot;).-&gt;[Int](1))(bson.this.BsonTransformer.TransformInt)))(DefaultHelper.this.DefaultsTo.default[org.mongodb.scala.Document], (ClassTag.apply[org.mongodb.scala.Document](classOf[org.mongodb.scala.bson.collection.immutable.Document]): scala.reflect.ClassTag[org.mongodb.scala.Document]))).toFuture(), scala.concurrent.duration.`package`.DurationInt(30).seconds))</description><symbolName>scala.util.Try.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</source><package>com.knoldus.db</package><class>MongoEntity</class><classType>Class</classType><fullClassName>com.knoldus.db.MongoEntity</fullClassName><method>findAll</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</path><id>76</id><start>1111</start><end>1111</end><line>44</line><description>DefaultHelper.this.DefaultsTo.default[T]</description><symbolName>org.mongodb.scala.bson.DefaultHelper.DefaultsTo.default</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>deleteUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>112</id><start>990</start><end>1203</end><line>35</line><description>{
  val result: scala.concurrent.Future[Int] = UserService.this.dao.findOne(userMobile, &quot;mobileNumber&quot;).flatMap[Int](((user: com.knoldus.domain.User) =&gt; UserService.this.dao.deleteOne(user.mobileNumber, &quot;mobileNumber&quot;).map[Int](((data: Int) =&gt; data))(scala.concurrent.ExecutionContext.Implicits.global)))(scala.concurrent.ExecutionContext.Implicits.global);
  result.map[Either[Nothing,Int]](((value: Int) =&gt; cats.implicits.catsSyntaxEitherId[Int](value).asRight[Nothing]))(scala.concurrent.ExecutionContext.Implicits.global)
}</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</source><package>com.knoldus.db</package><class>MongoApplication</class><classType>Object</classType><fullClassName>com.knoldus.db.MongoApplication</fullClassName><method>&lt;none&gt;</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</path><id>16</id><start>1255</start><end>1287</end><line>30</line><description>MongoApplication.this.tryConnectToMongo(MongoApplication.this.mongoDatabase)</description><symbolName>com.knoldus.db.MongoApplication.tryConnectToMongo</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>AddUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>97</id><start>709</start><end>740</end><line>24</line><description>scala.concurrent.Future.successful[Either[Nothing,com.knoldus.domain.User]](cats.implicits.catsSyntaxEitherId[com.knoldus.domain.User](user).asRight[Nothing])</description><symbolName>scala.concurrent.Future.successful</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</source><package>com.knoldus.db</package><class>MongoApplication</class><classType>Object</classType><fullClassName>com.knoldus.db.MongoApplication</fullClassName><method>&lt;none&gt;</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</path><id>7</id><start>990</start><end>1012</end><line>26</line><description>org.mongodb.scala.bson.codecs.`package`.DEFAULT_CODEC_REGISTRY</description><symbolName>org.mongodb.scala.bson.codecs.DEFAULT_CODEC_REGISTRY</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</source><package>com.knoldus.db</package><class>MongoEntity</class><classType>Class</classType><fullClassName>com.knoldus.db.MongoEntity</fullClassName><method>update</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</path><id>79</id><start>1216</start><end>1242</end><line>48</line><description>org.mongodb.scala.model.Filters.equal[Int](fieldName, existing)</description><symbolName>org.mongodb.scala.model.Filters.equal</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</source><package>com.knoldus.db</package><class>MongoEntity</class><classType>Class</classType><fullClassName>com.knoldus.db.MongoEntity</fullClassName><method>collection</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</path><id>88</id><start>1495</start><end>1495</end><line>59</line><description>DefaultHelper.this.DefaultsTo.overrideDefault[T, org.mongodb.scala.Document]</description><symbolName>org.mongodb.scala.bson.DefaultHelper.LowPriorityDefaultsTo.overrideDefault</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</source><package>com.knoldus.db</package><class>MongoEntity</class><classType>Class</classType><fullClassName>com.knoldus.db.MongoEntity</fullClassName><method>deleteMany</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</path><id>70</id><start>879</start><end>901</end><line>34</line><description>org.mongodb.scala.model.Filters.equal[Int](fieldName, data)</description><symbolName>org.mongodb.scala.model.Filters.equal</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</source><package>com.knoldus.db</package><class>ImplicitObservable</class><classType>Trait</classType><fullClassName>com.knoldus.db.Helpers.ImplicitObservable</fullClassName><method>results</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</path><id>43</id><start>709</start><end>739</end><line>24</line><description>scala.concurrent.duration.Duration.apply(10L, SECONDS)</description><symbolName>scala.concurrent.duration.Duration.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</source><package>com.knoldus.db</package><class>ImplicitObservable</class><classType>Trait</classType><fullClassName>com.knoldus.db.Helpers.ImplicitObservable</fullClassName><method>printResults</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</path><id>52</id><start>889</start><end>889</end><line>29</line><description>()</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</source><package>com.knoldus.db</package><class>MongoApplication</class><classType>Object</classType><fullClassName>com.knoldus.db.MongoApplication</fullClassName><method>&lt;none&gt;</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</path><id>25</id><start>1627</start><end>1657</end><line>40</line><description>scala.concurrent.duration.Duration.apply(10L, SECONDS)</description><symbolName>scala.concurrent.duration.Duration.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</source><package>com.knoldus.db</package><class>MongoApplication</class><classType>Object</classType><fullClassName>com.knoldus.db.MongoApplication</fullClassName><method>tryConnectToMongo</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</path><id>34</id><start>1922</start><end>1941</end><line>45</line><description>com.knoldus.utils.ThrowableExtensions.ThrowableOps(exception).printInfo</description><symbolName>com.knoldus.utils.ThrowableExtensions.ThrowableOps.printInfo</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</source><package>com.knoldus.db</package><class>ImplicitObservable</class><classType>Trait</classType><fullClassName>com.knoldus.db.Helpers.ImplicitObservable</fullClassName><method>printHeadResult</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</path><id>61</id><start>1053</start><end>1092</end><line>33</line><description>scala.StringContext.apply(&quot;&quot;, &quot;&quot;, &quot;&quot;).s(initial, ImplicitObservable.this.converter.apply(ImplicitObservable.this.headResult()))</description><symbolName>scala.StringContext.s</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</source><package>com.knoldus.db</package><class>MongoApplication</class><classType>Object</classType><fullClassName>com.knoldus.db.MongoApplication</fullClassName><method>&lt;none&gt;</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</path><id>10</id><start>1126</start><end>1139</end><line>27</line><description>MongoApplication.this.codecRegistry</description><symbolName>com.knoldus.db.MongoApplication.codecRegistry</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</source><package>com.knoldus.db</package><class>MongoApplication</class><classType>Object</classType><fullClassName>com.knoldus.db.MongoApplication</fullClassName><method>tryConnectToMongo</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</path><id>37</id><start>1953</start><end>1968</end><line>46</line><description>throw exception</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Throw</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</source><package>com.knoldus.db</package><class>MongoApplication</class><classType>Object</classType><fullClassName>com.knoldus.db.MongoApplication</fullClassName><method>&lt;none&gt;</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</path><id>1</id><start>785</start><end>805</end><line>23</line><description>com.typesafe.config.ConfigFactory.load()</description><symbolName>com.typesafe.config.ConfigFactory.load</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</source><package>com.knoldus.db</package><class>MongoApplication</class><classType>Object</classType><fullClassName>com.knoldus.db.MongoApplication</fullClassName><method>tryConnectToMongo</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</path><id>28</id><start>1795</start><end>1797</end><line>43</line><description>30</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</source><package>com.knoldus.db</package><class>MongoApplication</class><classType>Object</classType><fullClassName>com.knoldus.db.MongoApplication</fullClassName><method>&lt;none&gt;</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</path><id>19</id><start>1364</start><end>1367</end><line>33</line><description>MongoApplication.this.dao</description><symbolName>com.knoldus.db.MongoApplication.dao</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/utils/ThrowableExtensions.scala</source><package>com.knoldus.utils</package><class>ThrowableOps</class><classType>Class</classType><fullClassName>com.knoldus.utils.ThrowableExtensions.ThrowableOps</fullClassName><method>printInfo</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/utils/ThrowableExtensions.scala</path><id>147</id><start>150</start><end>151</end><line>8</line><description>&quot;&quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>updateUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>129</id><start>1750</start><end>1779</end><line>60</line><description>com.knoldus.service.UserService.UserServiceError.UserNotFound</description><symbolName>com.knoldus.service.UserService.UserServiceError.UserNotFound</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>findUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>138</id><start>1904</start><end>2013</end><line>67</line><description>{
  UserService.this.logger.info(&quot;user added successfully&quot;);
  UserService.this.dao.findOne(number, &quot;mobileNumber&quot;).map[Either[Nothing,com.knoldus.domain.User]](((x$1: com.knoldus.domain.User) =&gt; cats.implicits.catsSyntaxEitherId[com.knoldus.domain.User](x$1).asRight[Nothing]))(scala.concurrent.ExecutionContext.Implicits.global)
}</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>updateUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>120</id><start>1527</start><end>1541</end><line>53</line><description>&quot;mobileNumber&quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</source><package>com.knoldus.db</package><class>ImplicitObservable</class><classType>Trait</classType><fullClassName>com.knoldus.db.Helpers.ImplicitObservable</fullClassName><method>printHeadResult</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</path><id>60</id><start>1067</start><end>1090</end><line>33</line><description>ImplicitObservable.this.converter.apply(ImplicitObservable.this.headResult())</description><symbolName>scala.Function1.apply</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</source><package>com.knoldus.db</package><class>MongoEntity</class><classType>Class</classType><fullClassName>com.knoldus.db.MongoEntity</fullClassName><method>collection</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</path><id>87</id><start>1496</start><end>1510</end><line>59</line><description>MongoEntity.this.collectionName</description><symbolName>com.knoldus.db.MongoEntity.collectionName</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>AddUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>96</id><start>727</start><end>739</end><line>24</line><description>cats.implicits.catsSyntaxEitherId[com.knoldus.domain.User](user).asRight[Nothing]</description><symbolName>cats.syntax.EitherIdOps.asRight</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/utils/ThrowableExtensions.scala</source><package>com.knoldus.utils</package><class>ThrowableOps</class><classType>Class</classType><fullClassName>com.knoldus.utils.ThrowableExtensions.ThrowableOps</fullClassName><method>printInfo</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/utils/ThrowableExtensions.scala</path><id>150</id><start>263</start><end>266</end><line>10</line><description>&quot;&quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>updateUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>132</id><start>1688</start><end>1793</end><line>58</line><description>{
  UserService.this.logger.info(&quot;user not found&quot;);
  scala.concurrent.Future.successful[Either[com.knoldus.service.UserService.UserServiceError.UserNotFound.type,Nothing]](cats.implicits.catsSyntaxEitherId[com.knoldus.service.UserService.UserServiceError.UserNotFound.type](com.knoldus.service.UserService.UserServiceError.UserNotFound).asLeft[Nothing])
}</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>findUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>141</id><start>2090</start><end>2126</end><line>73</line><description>cats.implicits.catsSyntaxEitherId[com.knoldus.service.UserService.UserServiceError.UserNotFound.type](com.knoldus.service.UserService.UserServiceError.UserNotFound).asLeft[Nothing]</description><symbolName>cats.syntax.EitherIdOps.asLeft</symbolName><treeName>TypeApply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>deleteUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>105</id><start>1057</start><end>1071</end><line>37</line><description>&quot;mobileNumber&quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>updateUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>123</id><start>1551</start><end>1631</end><line>54</line><description>UserService.this.dao.update(user.mobileNumber, mobile, &quot;mobileNumber&quot;).map[Int](((data: Int) =&gt; data))(scala.concurrent.ExecutionContext.Implicits.global)</description><symbolName>scala.concurrent.Future.map</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>deleteUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>114</id><start>1275</start><end>1304</end><line>44</line><description>com.knoldus.service.UserService.UserServiceError.UserNotFound</description><symbolName>com.knoldus.service.UserService.UserServiceError.UserNotFound</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</source><package>com.knoldus.db</package><class>MongoEntity</class><classType>Class</classType><fullClassName>com.knoldus.db.MongoEntity</fullClassName><method>deleteOne</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</path><id>69</id><start>692</start><end>756</end><line>29</line><description>scala.this.`package`.ScalaSingleObservable[org.mongodb.scala.result.DeleteResult](MongoEntity.this.collection.deleteOne(org.mongodb.scala.model.Filters.equal[Int](fieldName, t))).toFuture().map[Int](((x$3: org.mongodb.scala.result.DeleteResult) =&gt; t))(scala.concurrent.ExecutionContext.Implicits.global)</description><symbolName>scala.concurrent.Future.map</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</source><package>com.knoldus.db</package><class>MongoEntity</class><classType>Class</classType><fullClassName>com.knoldus.db.MongoEntity</fullClassName><method>findAll</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</path><id>78</id><start>1096</start><end>1113</end><line>44</line><description>MongoEntity.this.collection.find[T]()(DefaultHelper.this.DefaultsTo.default[T], MongoEntity.this.c)</description><symbolName>org.mongodb.scala.MongoCollection.find</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>AddUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>99</id><start>764</start><end>798</end><line>27</line><description>UserService.this.logger.info(&quot;user already exists&quot;)</description><symbolName>org.apache.log4j.Category.info</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</source><package>com.knoldus.db</package><class>MongoEntity</class><classType>Class</classType><fullClassName>com.knoldus.db.MongoEntity</fullClassName><method>createMany</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</path><id>63</id><start>483</start><end>507</end><line>19</line><description>MongoEntity.this.collection.insertMany(t)</description><symbolName>org.mongodb.scala.MongoCollection.insertMany</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</source><package>com.knoldus.db</package><class>MongoEntity</class><classType>Class</classType><fullClassName>com.knoldus.db.MongoEntity</fullClassName><method>collection</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</path><id>90</id><start>1473</start><end>1511</end><line>59</line><description>MongoEntity.this.database.getCollection[T](MongoEntity.this.collectionName)(DefaultHelper.this.DefaultsTo.overrideDefault[T, org.mongodb.scala.Document], MongoEntity.this.c)</description><symbolName>org.mongodb.scala.MongoDatabase.getCollection</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</source><package>com.knoldus.db</package><class>ImplicitObservable</class><classType>Trait</classType><fullClassName>com.knoldus.db.Helpers.ImplicitObservable</fullClassName><method>headResult</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</path><id>45</id><start>778</start><end>795</end><line>26</line><description>org.mongodb.scala.`package`.ScalaObservable[C](ImplicitObservable.this.observable).head()</description><symbolName>org.mongodb.scala.ObservableImplicits.ScalaObservable.head</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</source><package>com.knoldus.db</package><class>ImplicitObservable</class><classType>Trait</classType><fullClassName>com.knoldus.db.Helpers.ImplicitObservable</fullClassName><method>printResults</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</path><id>54</id><start>959</start><end>982</end><line>30</line><description>scala.Predef.println(ImplicitObservable.this.converter.apply(res))</description><symbolName>scala.Predef.println</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>getCount</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>144</id><start>2201</start><end>2240</end><line>80</line><description>UserService.this.dao.count(mobileNumber, &quot;mobileNumber&quot;)</description><symbolName>com.knoldus.db.MongoEntity.count</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</source><package>com.knoldus.db</package><class>MongoEntity</class><classType>Class</classType><fullClassName>com.knoldus.db.MongoEntity</fullClassName><method>deleteMany</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</path><id>72</id><start>857</start><end>925</end><line>34</line><description>scala.this.`package`.ScalaSingleObservable[org.mongodb.scala.result.DeleteResult](MongoEntity.this.collection.deleteMany(org.mongodb.scala.model.Filters.equal[Int](fieldName, data))).toFuture().map[Seq[Int]](((x$4: org.mongodb.scala.result.DeleteResult) =&gt; t))(scala.concurrent.ExecutionContext.Implicits.global)</description><symbolName>scala.concurrent.Future.map</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</source><package>com.knoldus.db</package><class>MongoEntity</class><classType>Class</classType><fullClassName>com.knoldus.db.MongoEntity</fullClassName><method>update</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</path><id>81</id><start>1195</start><end>1262</end><line>48</line><description>MongoEntity.this.collection.updateOne(org.mongodb.scala.model.Filters.equal[Int](fieldName, existing), org.mongodb.scala.model.Updates.set[Int](fieldName, t))</description><symbolName>org.mongodb.scala.MongoCollection.updateOne</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/utils/ThrowableExtensions.scala</source><package>com.knoldus.utils</package><class>ThrowableOps</class><classType>Class</classType><fullClassName>com.knoldus.utils.ThrowableExtensions.ThrowableOps</fullClassName><method>printInfo</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/utils/ThrowableExtensions.scala</path><id>153</id><start>224</start><end>262</end><line>10</line><description>scala.Predef.refArrayOps[StackTraceElement](ThrowableOps.this.throwable.getStackTrace()).mkString(&quot;\n&quot;)</description><symbolName>scala.collection.TraversableOnce.mkString</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>updateUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>126</id><start>1638</start><end>1672</end><line>56</line><description>result.map[Either[Nothing,Int]](((value: Int) =&gt; cats.implicits.catsSyntaxEitherId[Int](value).asRight[Nothing]))(scala.concurrent.ExecutionContext.Implicits.global)</description><symbolName>scala.concurrent.Future.map</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</source><package>com.knoldus.db</package><class>MongoApplication</class><classType>Object</classType><fullClassName>com.knoldus.db.MongoApplication</fullClassName><method>tryConnectToMongo</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</path><id>27</id><start>1737</start><end>1793</end><line>43</line><description>scala.this.`package`.ScalaSingleObservable[org.mongodb.scala.Document](mongoDatabase.runCommand[org.mongodb.scala.Document](org.mongodb.scala.bson.collection.mutable.Document.apply(bson.this.BsonMagnets.tupleToCanBeBsonElement[Int](scala.Predef.ArrowAssoc[String](&quot;ping&quot;).-&gt;[Int](1))(bson.this.BsonTransformer.TransformInt)))(DefaultHelper.this.DefaultsTo.default[org.mongodb.scala.Document], (ClassTag.apply[org.mongodb.scala.Document](classOf[org.mongodb.scala.bson.collection.immutable.Document]): scala.reflect.ClassTag[org.mongodb.scala.Document]))).toFuture()</description><symbolName>org.mongodb.scala.ObservableImplicits.ScalaSingleObservable.toFuture</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>findUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>135</id><start>1977</start><end>1991</end><line>69</line><description>&quot;mobileNumber&quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>deleteUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>108</id><start>1081</start><end>1156</end><line>38</line><description>UserService.this.dao.deleteOne(user.mobileNumber, &quot;mobileNumber&quot;).map[Int](((data: Int) =&gt; data))(scala.concurrent.ExecutionContext.Implicits.global)</description><symbolName>scala.concurrent.Future.map</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</source><package>com.knoldus.db</package><class>MongoApplication</class><classType>Object</classType><fullClassName>com.knoldus.db.MongoApplication</fullClassName><method>tryConnectToMongo</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</path><id>36</id><start>1857</start><end>1944</end><line>45</line><description>MongoApplication.this.logger.error(scala.StringContext.apply(&quot;Could not connect to Mongo on bootstrap. Error: &quot;, &quot;&quot;).s(com.knoldus.utils.ThrowableExtensions.ThrowableOps(exception).printInfo))</description><symbolName>org.apache.log4j.Category.error</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>deleteUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>117</id><start>1213</start><end>1318</end><line>42</line><description>{
  UserService.this.logger.info(&quot;user not found&quot;);
  scala.concurrent.Future.successful[Either[com.knoldus.service.UserService.UserServiceError.UserNotFound.type,Nothing]](cats.implicits.catsSyntaxEitherId[com.knoldus.service.UserService.UserServiceError.UserNotFound.type](com.knoldus.service.UserService.UserServiceError.UserNotFound).asLeft[Nothing])
}</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</source><package>com.knoldus.db</package><class>MongoApplication</class><classType>Object</classType><fullClassName>com.knoldus.db.MongoApplication</fullClassName><method>&lt;none&gt;</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</path><id>9</id><start>1075</start><end>1106</end><line>27</line><description>MongoApplication.this.conf.getString(&quot;mongo.db-name&quot;)</description><symbolName>com.typesafe.config.Config.getString</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</source><package>com.knoldus.db</package><class>MongoApplication</class><classType>Object</classType><fullClassName>com.knoldus.db.MongoApplication</fullClassName><method>&lt;none&gt;</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</path><id>18</id><start>1301</start><end>1327</end><line>32</line><description>new com.knoldus.dao.UserDao(MongoApplication.this.mongoDatabase)</description><symbolName>com.knoldus.dao.UserDao.&lt;init&gt;</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</source><package>com.knoldus.db</package><class>ImplicitObservable</class><classType>Trait</classType><fullClassName>com.knoldus.db.Helpers.ImplicitObservable</fullClassName><method>printResults</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</path><id>48</id><start>893</start><end>911</end><line>29</line><description>initial.length().&gt;(0)</description><symbolName>scala.Int.&gt;</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</source><package>com.knoldus.db</package><class>MongoApplication</class><classType>Object</classType><fullClassName>com.knoldus.db.MongoApplication</fullClassName><method>&lt;none&gt;</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</path><id>21</id><start>1348</start><end>1348</end><line>33</line><description>MongoApplication.this.logger</description><symbolName>com.knoldus.db.MongoApplication.logger</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</source><package>com.knoldus.db</package><class>ImplicitObservable</class><classType>Trait</classType><fullClassName>com.knoldus.db.Helpers.ImplicitObservable</fullClassName><method>printHeadResult</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</path><id>57</id><start>1065</start><end>1066</end><line>33</line><description>&quot;&quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</source><package>com.knoldus.db</package><class>MongoApplication</class><classType>Object</classType><fullClassName>com.knoldus.db.MongoApplication</fullClassName><method>&lt;none&gt;</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</path><id>12</id><start>1211</start><end>1250</end><line>28</line><description>MongoApplication.this.conf.getString(&quot;mongo.collection-name&quot;)</description><symbolName>com.typesafe.config.Config.getString</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</source><package>com.knoldus.db</package><class>MongoApplication</class><classType>Object</classType><fullClassName>com.knoldus.db.MongoApplication</fullClassName><method>&lt;none&gt;</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</path><id>3</id><start>830</start><end>861</end><line>24</line><description>org.apache.log4j.Logger.getLogger(this.getClass())</description><symbolName>org.apache.log4j.Logger.getLogger</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</source><package>com.knoldus.db</package><class>MongoEntity</class><classType>Class</classType><fullClassName>com.knoldus.db.MongoEntity</fullClassName><method>count</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</path><id>84</id><start>1353</start><end>1390</end><line>54</line><description>MongoEntity.this.collection.count(org.mongodb.scala.model.Filters.equal[Int](fieldName, t))</description><symbolName>org.mongodb.scala.MongoCollection.count</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>AddUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>102</id><start>805</start><end>864</end><line>28</line><description>scala.concurrent.Future.successful[Either[com.knoldus.service.UserService.UserServiceError.UserAlreadyExist.type,Nothing]](cats.implicits.catsSyntaxEitherId[com.knoldus.service.UserService.UserServiceError.UserAlreadyExist.type](com.knoldus.service.UserService.UserServiceError.UserAlreadyExist).asLeft[Nothing])</description><symbolName>scala.concurrent.Future.successful</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>AddUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>93</id><start>574</start><end>606</end><line>21</line><description>UserService.this.getCount(user.mobileNumber).==(0)</description><symbolName>scala.Int.==</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</source><package>com.knoldus.db</package><class>MongoEntity</class><classType>Class</classType><fullClassName>com.knoldus.db.MongoEntity</fullClassName><method>findOne</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</path><id>75</id><start>993</start><end>1048</end><line>39</line><description>scala.this.`package`.ScalaSingleObservable[T](MongoEntity.this.collection.find[T](org.mongodb.scala.model.Filters.equal[Int](fieldName, t))(DefaultHelper.this.DefaultsTo.default[T], MongoEntity.this.c).first()).toFuture()</description><symbolName>org.mongodb.scala.ObservableImplicits.ScalaSingleObservable.toFuture</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</source><package>com.knoldus.db</package><class>MongoApplication</class><classType>Object</classType><fullClassName>com.knoldus.db.MongoApplication</fullClassName><method>tryConnectToMongo</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</path><id>30</id><start>1724</start><end>1806</end><line>43</line><description>scala.concurrent.Await.result[org.mongodb.scala.Document](scala.this.`package`.ScalaSingleObservable[org.mongodb.scala.Document](mongoDatabase.runCommand[org.mongodb.scala.Document](org.mongodb.scala.bson.collection.mutable.Document.apply(bson.this.BsonMagnets.tupleToCanBeBsonElement[Int](scala.Predef.ArrowAssoc[String](&quot;ping&quot;).-&gt;[Int](1))(bson.this.BsonTransformer.TransformInt)))(DefaultHelper.this.DefaultsTo.default[org.mongodb.scala.Document], (ClassTag.apply[org.mongodb.scala.Document](classOf[org.mongodb.scala.bson.collection.immutable.Document]): scala.reflect.ClassTag[org.mongodb.scala.Document]))).toFuture(), scala.concurrent.duration.`package`.DurationInt(30).seconds)</description><symbolName>scala.concurrent.Await.result</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/dao/UserDao.scala</source><package>com.knoldus.dao</package><class>UserDao</class><classType>Class</classType><fullClassName>com.knoldus.dao.UserDao</fullClassName><method>&lt;none&gt;</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/dao/UserDao.scala</path><id>39</id><start>297</start><end>303</end><line>11</line><description>&quot;User&quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>deleteUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>111</id><start>1163</start><end>1197</end><line>40</line><description>result.map[Either[Nothing,Int]](((value: Int) =&gt; cats.implicits.catsSyntaxEitherId[Int](value).asRight[Nothing]))(scala.concurrent.ExecutionContext.Implicits.global)</description><symbolName>scala.concurrent.Future.map</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</source><package>com.knoldus.db</package><class>MongoEntity</class><classType>Class</classType><fullClassName>com.knoldus.db.MongoEntity</fullClassName><method>create</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/MongoEntity.scala</path><id>66</id><start>575</start><end>621</end><line>24</line><description>scala.this.`package`.ScalaSingleObservable[org.mongodb.scala.Completed](MongoEntity.this.collection.insertOne(t)).toFuture().map[T](((x$2: org.mongodb.scala.Completed) =&gt; t))(scala.concurrent.ExecutionContext.Implicits.global)</description><symbolName>scala.concurrent.Future.map</symbolName><treeName>ApplyToImplicitArgs</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</source><package>com.knoldus.db</package><class>MongoApplication</class><classType>Object</classType><fullClassName>com.knoldus.db.MongoApplication</fullClassName><method>&lt;none&gt;</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</path><id>15</id><start>1273</start><end>1286</end><line>30</line><description>MongoApplication.this.mongoDatabase</description><symbolName>com.knoldus.db.MongoApplication.mongoDatabase</symbolName><treeName>Select</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</source><package>com.knoldus.db</package><class>ImplicitObservable</class><classType>Trait</classType><fullClassName>com.knoldus.db.Helpers.ImplicitObservable</fullClassName><method>results</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</path><id>42</id><start>686</start><end>707</end><line>24</line><description>org.mongodb.scala.`package`.ScalaObservable[C](ImplicitObservable.this.observable).toFuture()</description><symbolName>org.mongodb.scala.ObservableImplicits.ScalaObservable.toFuture</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</source><package>com.knoldus.db</package><class>ImplicitObservable</class><classType>Trait</classType><fullClassName>com.knoldus.db.Helpers.ImplicitObservable</fullClassName><method>printResults</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/db/Helpers.scala</path><id>51</id><start>889</start><end>889</end><line>29</line><description>()</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</source><package>com.knoldus.db</package><class>MongoApplication</class><classType>Object</classType><fullClassName>com.knoldus.db.MongoApplication</fullClassName><method>tryConnectToMongo</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</path><id>33</id><start>1942</start><end>1943</end><line>45</line><description>&quot;&quot;</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Literal</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</source><package>com.knoldus.db</package><class>MongoApplication</class><classType>Object</classType><fullClassName>com.knoldus.db.MongoApplication</fullClassName><method>&lt;none&gt;</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</path><id>24</id><start>1594</start><end>1625</end><line>40</line><description>MongoApplication.this.userService.findUser(111311111)</description><symbolName>com.knoldus.service.UserService.findUser</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</source><package>com.knoldus.db</package><class>MongoApplication</class><classType>Object</classType><fullClassName>com.knoldus.db.MongoApplication</fullClassName><method>&lt;none&gt;</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/MongoApplication.scala</path><id>6</id><start>960</start><end>988</end><line>26</line><description>org.bson.codecs.configuration.CodecRegistries.fromProviders({
  import org.bson.codecs.Codec;
  import org.bson.codecs.configuration.{CodecProvider, CodecRegistry};
  {
    final class $anon extends Object with org.bson.codecs.configuration.CodecProvider {
      def &lt;init&gt;(): &lt;$anon: org.bson.codecs.configuration.CodecProvider&gt; = {
        $anon.super.&lt;init&gt;();
        ()
      };
      @SuppressWarnings(value = [&quot;unchecked&quot;]) def get[C](clazz: Class[C], codecRegistry: org.bson.codecs.configuration.CodecRegistry): org.bson.codecs.Codec[C] = if (classOf[com.knoldus.domain.User].isAssignableFrom(clazz))
        {
  import scala.collection.mutable;
  import org.bson.{BsonInvalidOperationException, BsonWriter};
  import org.bson.codecs.EncoderContext;
  import org.bson.codecs.configuration.CodecRegistry;
  import org.mongodb.scala.bson.codecs.macrocodecs.MacroCodec;
  case class UserMacroCodec extends Object with org.mongodb.scala.bson.codecs.macrocodecs.MacroCodec[com.knoldus.domain.User] with Product with Serializable {
    &lt;caseaccessor&gt; &lt;paramaccessor&gt; private[this] val codecRegistry: org.bson.codecs.configuration.CodecRegistry = _;
    &lt;stable&gt; &lt;caseaccessor&gt; &lt;accessor&gt; &lt;paramaccessor&gt; def codecRegistry: org.bson.codecs.configuration.CodecRegistry = UserMacroCodec.this.codecRegistry;
    def &lt;init&gt;(codecRegistry: org.bson.codecs.configuration.CodecRegistry): UserMacroCodec = {
      UserMacroCodec.super.&lt;init&gt;();
      ()
    };
    private[this] val caseClassesMap: scala.collection.immutable.Map[String,Class[_]] = {
      val caseClassesMap: scala.collection.mutable.Map[String,Class[_]] = scala.collection.mutable.Map.apply[String, Class[_]]();
      caseClassesMap.+=(scala.Predef.ArrowAssoc[String](&quot;User&quot;).-&gt;[Class[com.knoldus.domain.User]](classOf[com.knoldus.domain.User]));
      caseClassesMap.toMap[String, Class[_]](scala.Predef.$conforms[(String, Class[_])])
    };
    &lt;stable&gt; &lt;accessor&gt; def caseClassesMap: scala.collection.immutable.Map[String,Class[_]] = UserMacroCodec.this.caseClassesMap;
    private[this] val classToCaseClassMap: scala.collection.immutable.Map[Class[_],Boolean] = {
      val classToCaseClassMap: scala.collection.mutable.Map[Class[_],Boolean] = scala.collection.mutable.Map.apply[Class[_], Boolean]();
      classToCaseClassMap.++=(scala.collection.immutable.List.apply[(Class[org.bson.types.ObjectId], Boolean)](scala.Tuple2.apply[Class[org.bson.types.ObjectId], Boolean](classOf[org.bson.types.ObjectId], false)));
      classToCaseClassMap.++=(scala.collection.immutable.List.apply[(Class[String], Boolean)](scala.Tuple2.apply[Class[String], Boolean](classOf[java.lang.String], false)));
      classToCaseClassMap.++=(scala.collection.immutable.List.apply[(Class[String], Boolean)](scala.Tuple2.apply[Class[String], Boolean](classOf[java.lang.String], false)));
      classToCaseClassMap.++=(scala.collection.immutable.List.apply[(Class[String], Boolean)](scala.Tuple2.apply[Class[String], Boolean](classOf[java.lang.String], false)));
      classToCaseClassMap.++=(scala.collection.immutable.List.apply[(Class[String], Boolean)](scala.Tuple2.apply[Class[String], Boolean](classOf[java.lang.String], false)));
      classToCaseClassMap.++=(scala.collection.immutable.List.apply[(Class[Integer], Boolean)](scala.Tuple2.apply[Class[Integer], Boolean](classOf[java.lang.Integer], false)));
      classToCaseClassMap.++=(scala.collection.immutable.List.apply[(Class[String], Boolean)](scala.Tuple2.apply[Class[String], Boolean](classOf[java.lang.String], false)));
      classToCaseClassMap.++=(scala.collection.immutable.List.apply[(Class[com.knoldus.domain.User], Boolean)](scala.Tuple2.apply[Class[com.knoldus.domain.User], Boolean](classOf[com.knoldus.domain.User], true)));
      classToCaseClassMap.toMap[Class[_], Boolean](scala.Predef.$conforms[(Class[_], Boolean)])
    };
    &lt;stable&gt; &lt;accessor&gt; def classToCaseClassMap: scala.collection.immutable.Map[Class[_],Boolean] = UserMacroCodec.this.classToCaseClassMap;
    private[this] val classFieldTypeArgsMap: scala.collection.immutable.Map[String,Map[String,List[Class[_]]]] = {
      val classFieldTypeArgs: scala.collection.mutable.Map[String,scala.collection.immutable.Map[String,List[Class[_]]]] = scala.collection.mutable.Map.apply[String, Map[String,List[Class[_]]]]();
      classFieldTypeArgs.+=(scala.Predef.ArrowAssoc[String](&quot;User&quot;).-&gt;[scala.collection.immutable.Map[String,List[Class[_]]]]({
        val typeArgs: scala.collection.mutable.Map[String,List[Class[_]]] = scala.collection.mutable.Map.apply[String, List[Class[_]]]();
        typeArgs.+=(scala.Predef.ArrowAssoc[String](&quot;_id&quot;).-&gt;[List[Class[_]]]({
          val tpeArgs: scala.collection.mutable.ListBuffer[Class[_]] = scala.collection.mutable.ListBuffer.empty[Class[_]];
          tpeArgs.+=(classOf[org.bson.types.ObjectId]);
          tpeArgs.toList
        }));
        typeArgs.+=(scala.Predef.ArrowAssoc[String](&quot;firstName&quot;).-&gt;[List[Class[_]]]({
          val tpeArgs: scala.collection.mutable.ListBuffer[Class[_]] = scala.collection.mutable.ListBuffer.empty[Class[_]];
          tpeArgs.+=(classOf[java.lang.String]);
          tpeArgs.toList
        }));
        typeArgs.+=(scala.Predef.ArrowAssoc[String](&quot;lastName&quot;).-&gt;[List[Class[_]]]({
          val tpeArgs: scala.collection.mutable.ListBuffer[Class[_]] = scala.collection.mutable.ListBuffer.empty[Class[_]];
          tpeArgs.+=(classOf[java.lang.String]);
          tpeArgs.toList
        }));
        typeArgs.+=(scala.Predef.ArrowAssoc[String](&quot;country&quot;).-&gt;[List[Class[_]]]({
          val tpeArgs: scala.collection.mutable.ListBuffer[Class[_]] = scala.collection.mutable.ListBuffer.empty[Class[_]];
          tpeArgs.+=(classOf[java.lang.String]);
          tpeArgs.toList
        }));
        typeArgs.+=(scala.Predef.ArrowAssoc[String](&quot;dob&quot;).-&gt;[List[Class[_]]]({
          val tpeArgs: scala.collection.mutable.ListBuffer[Class[_]] = scala.collection.mutable.ListBuffer.empty[Class[_]];
          tpeArgs.+=(classOf[java.lang.String]);
          tpeArgs.toList
        }));
        typeArgs.+=(scala.Predef.ArrowAssoc[String](&quot;mobileNumber&quot;).-&gt;[List[Class[_]]]({
          val tpeArgs: scala.collection.mutable.ListBuffer[Class[_]] = scala.collection.mutable.ListBuffer.empty[Class[_]];
          tpeArgs.+=(classOf[java.lang.Integer]);
          tpeArgs.toList
        }));
        typeArgs.+=(scala.Predef.ArrowAssoc[String](&quot;address&quot;).-&gt;[List[Class[_]]]({
          val tpeArgs: scala.collection.mutable.ListBuffer[Class[_]] = scala.collection.mutable.ListBuffer.empty[Class[_]];
          tpeArgs.+=(classOf[java.lang.String]);
          tpeArgs.toList
        }));
        typeArgs.toMap[String, List[Class[_]]](scala.Predef.$conforms[(String, List[Class[_]])])
      }));
      classFieldTypeArgs.toMap[String, Map[String,List[Class[_]]]](scala.Predef.$conforms[(String, scala.collection.immutable.Map[String,List[Class[_]]])])
    };
    &lt;stable&gt; &lt;accessor&gt; def classFieldTypeArgsMap: scala.collection.immutable.Map[String,Map[String,List[Class[_]]]] = UserMacroCodec.this.classFieldTypeArgsMap;
    private[this] val encoderClass: Class[com.knoldus.domain.User] = classOf[com.knoldus.domain.User];
    &lt;stable&gt; &lt;accessor&gt; def encoderClass: Class[com.knoldus.domain.User] = UserMacroCodec.this.encoderClass;
    def getInstance(className: String, fieldData: Map[String,Any]): com.knoldus.domain.User = className match {
      case &quot;User&quot; =&gt; new com.knoldus.domain.User(fieldData.getOrElse[Any](&quot;_id&quot;, throw new org.bson.BsonInvalidOperationException(&quot;Missing field: \&quot;_id\&quot;&quot;)).asInstanceOf[org.mongodb.scala.bson.ObjectId], fieldData.getOrElse[Any](&quot;firstName&quot;, throw new org.bson.BsonInvalidOperationException(&quot;Missing field: \&quot;firstName\&quot;&quot;)).asInstanceOf[String], fieldData.getOrElse[Any](&quot;lastName&quot;, throw new org.bson.BsonInvalidOperationException(&quot;Missing field: \&quot;lastName\&quot;&quot;)).asInstanceOf[String], fieldData.getOrElse[Any](&quot;country&quot;, throw new org.bson.BsonInvalidOperationException(&quot;Missing field: \&quot;country\&quot;&quot;)).asInstanceOf[String], fieldData.getOrElse[Any](&quot;dob&quot;, throw new org.bson.BsonInvalidOperationException(&quot;Missing field: \&quot;dob\&quot;&quot;)).asInstanceOf[String], fieldData.getOrElse[Any](&quot;mobileNumber&quot;, throw new org.bson.BsonInvalidOperationException(&quot;Missing field: \&quot;mobileNumber\&quot;&quot;)).asInstanceOf[Int], fieldData.getOrElse[Any](&quot;address&quot;, throw new org.bson.BsonInvalidOperationException(&quot;Missing field: \&quot;address\&quot;&quot;)).asInstanceOf[String])
      case _ =&gt; throw new org.bson.BsonInvalidOperationException(&quot;Unexpected class type: &quot;.+(className))
    };
    def writeCaseClassData(className: String, writer: org.bson.BsonWriter, value: com.knoldus.domain.User, encoderContext: org.bson.codecs.EncoderContext): Unit = {
      writer.writeStartDocument();
      this.writeClassFieldName(writer, className, encoderContext);
      className match {
        case &quot;User&quot; =&gt; {
          val instanceValue: com.knoldus.domain.User = value.asInstanceOf[com.knoldus.domain.User];
          {
            val localVal: org.mongodb.scala.bson.ObjectId = instanceValue._id;
            writer.writeName(&quot;_id&quot;);
            this.writeFieldValue[org.mongodb.scala.bson.ObjectId](&quot;_id&quot;, writer, localVal, encoderContext)
          };
          {
            val localVal: String = instanceValue.firstName;
            writer.writeName(&quot;firstName&quot;);
            this.writeFieldValue[String](&quot;firstName&quot;, writer, localVal, encoderContext)
          };
          {
            val localVal: String = instanceValue.lastName;
            writer.writeName(&quot;lastName&quot;);
            this.writeFieldValue[String](&quot;lastName&quot;, writer, localVal, encoderContext)
          };
          {
            val localVal: String = instanceValue.country;
            writer.writeName(&quot;country&quot;);
            this.writeFieldValue[String](&quot;country&quot;, writer, localVal, encoderContext)
          };
          {
            val localVal: String = instanceValue.dob;
            writer.writeName(&quot;dob&quot;);
            this.writeFieldValue[String](&quot;dob&quot;, writer, localVal, encoderContext)
          };
          {
            val localVal: Int = instanceValue.mobileNumber;
            writer.writeName(&quot;mobileNumber&quot;);
            this.writeFieldValue[Int](&quot;mobileNumber&quot;, writer, localVal, encoderContext)
          };
          {
            val localVal: String = instanceValue.address;
            writer.writeName(&quot;address&quot;);
            this.writeFieldValue[String](&quot;address&quot;, writer, localVal, encoderContext)
          }
        }
      };
      writer.writeEndDocument()
    };
    &lt;synthetic&gt; def copy(codecRegistry: org.bson.codecs.configuration.CodecRegistry = codecRegistry): UserMacroCodec = new UserMacroCodec(codecRegistry);
    &lt;synthetic&gt; def copy$default$1: org.bson.codecs.configuration.CodecRegistry = UserMacroCodec.this.codecRegistry;
    override &lt;synthetic&gt; def productPrefix: String = &quot;UserMacroCodec&quot;;
    &lt;synthetic&gt; def productArity: Int = 1;
    &lt;synthetic&gt; def productElement(x$1: Int): Any = x$1 match {
      case 0 =&gt; UserMacroCodec.this.codecRegistry
      case _ =&gt; throw new IndexOutOfBoundsException(x$1.toString())
    };
    override &lt;synthetic&gt; def productIterator: Iterator[Any] = scala.runtime.ScalaRunTime.typedProductIterator[Any](UserMacroCodec.this);
    &lt;synthetic&gt; def canEqual(x$1: Any): Boolean = x$1.$isInstanceOf[UserMacroCodec]();
    override &lt;synthetic&gt; def hashCode(): Int = scala.runtime.ScalaRunTime._hashCode(UserMacroCodec.this);
    override &lt;synthetic&gt; def toString(): String = scala.runtime.ScalaRunTime._toString(UserMacroCodec.this);
    override &lt;synthetic&gt; def equals(x$1: Any): Boolean = UserMacroCodec.this.eq(x$1.asInstanceOf[Object]).||(x$1 match {
  case (_: UserMacroCodec) =&gt; true
  case _ =&gt; false
}.&amp;&amp;({
      &lt;synthetic&gt; val UserMacroCodec$1: UserMacroCodec = x$1.asInstanceOf[UserMacroCodec];
      UserMacroCodec.this.codecRegistry.==(UserMacroCodec$1.codecRegistry).&amp;&amp;(UserMacroCodec$1.canEqual(UserMacroCodec.this))
    }))
  };
  &lt;synthetic&gt; object UserMacroCodec extends scala.runtime.AbstractFunction1[org.bson.codecs.configuration.CodecRegistry,UserMacroCodec] with Serializable {
    def &lt;init&gt;(): UserMacroCodec.type = {
      UserMacroCodec.super.&lt;init&gt;();
      ()
    };
    final override &lt;synthetic&gt; def toString(): String = &quot;UserMacroCodec&quot;;
    case &lt;synthetic&gt; def apply(codecRegistry: org.bson.codecs.configuration.CodecRegistry): UserMacroCodec = new UserMacroCodec(codecRegistry);
    case &lt;synthetic&gt; def unapply(x$0: UserMacroCodec): Option[org.bson.codecs.configuration.CodecRegistry] = if (x$0.==(null))
      scala.None
    else
      Some.apply[org.bson.codecs.configuration.CodecRegistry](x$0.codecRegistry)
  };
  UserMacroCodec.apply(codecRegistry).asInstanceOf[org.bson.codecs.Codec[com.knoldus.domain.User]]
}.asInstanceOf[org.bson.codecs.Codec[C]]
      else
        null
    };
    new $anon()
  }
})</description><symbolName>org.bson.codecs.configuration.CodecRegistries.fromProviders</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/utils/ThrowableExtensions.scala</source><package>com.knoldus.utils</package><class>ThrowableOps</class><classType>Class</classType><fullClassName>com.knoldus.utils.ThrowableExtensions.ThrowableOps</fullClassName><method>printInfo</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/utils/ThrowableExtensions.scala</path><id>152</id><start>196</start><end>216</end><line>9</line><description>ThrowableOps.this.throwable.getMessage()</description><symbolName>java.lang.Throwable.getMessage</symbolName><treeName>Apply</treeName><branch>false</branch><count>0</count><ignored>false</ignored></statement>
<statement><source>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</source><package>com.knoldus.service</package><class>UserService</class><classType>Class</classType><fullClassName>com.knoldus.service.UserService</fullClassName><method>findUser</method><path>/home/shubham/Desktop/work/scala-mongodb/src/main/scala/com/knoldus/service/UserService.scala</path><id>143</id><start>2023</start><end>2133</end><line>71</line><description>{
  UserService.this.logger.info(&quot;user already exists&quot;);
  scala.concurrent.Future.successful[Either[com.knoldus.service.UserService.UserServiceError.UserNotFound.type,Nothing]](cats.implicits.catsSyntaxEitherId[com.knoldus.service.UserService.UserServiceError.UserNotFound.type](com.knoldus.service.UserService.UserServiceError.UserNotFound).asLeft[Nothing])
}</description><symbolName>&lt;nosymbol&gt;</symbolName><treeName>Block</treeName><branch>true</branch><count>0</count><ignored>false</ignored></statement>
</statements>